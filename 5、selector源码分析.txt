Selector selector = Selector.open()；
实际上就是创建了一个WindowsSelector的实现类对象。

其 WindowsSelectorImpl构造函数为：
     1、创建一个管道pipe，读端在高32位，写端在低32位
     2、初始化一个PollArrayWrapper，本质上是pollfd数组
     3、把读端fd添加到PollArrayWrapper的fd数组中，
     4、初始化SelectionKey数组

----------------------------------------------------

select函数 
这里native的太多，所以分析起来不能很详细。。
主要工作 : 轮询PollArray的FD，看有没有事件发生，
如果有事件发生收集所有发生事件的FD，退出阻塞

------------------------------------------------------

register函数
新建SelectionKey，注册感兴趣事件和附件
把新建的SelectionKey添加到pollWrapper的channel数组

---------------------------------------------------------

selector.wakeup() 从阻塞状态到主动唤醒

向最开始建立的pipe的sink端写入了一个字节，
source文件描述符就会处于就绪状态，poll方法会返回，从而导致select方法返回


详细代码有：
package com.test;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;

public class SocketServerDemo2 {

	public static void main(String[] args) throws IOException {
		ServerSocketChannel serverChannel = ServerSocketChannel.open();
		serverChannel.configureBlocking(false);
		serverChannel.socket().bind(new InetSocketAddress(8080));
		
		//初始化管道pipe，读端在高32位，写端在低32位。
		//初始化pollArrayWrapper，类似一个数组，将管道的读端高32位的FD写到poolArray中
		//初始化selectionKey数组。
		Selector selector = Selector.open();
		
		//注册感兴趣事件和附件，感兴趣的事件有接受、连接、读、写
		//将selectionKey添加到对应的channel中
		serverChannel.register(selector, SelectionKey.OP_ACCEPT);
		while (true) {
			//轮询pollArray的FD，比对是否有事件发生
			//如果有，则获取所有发生事件的FD，退出阻塞。	
			int n = selector.select();
			if (n == 0)
				continue;
			Iterator ite = selector.selectedKeys().iterator();
			while (ite.hasNext()) {
				SelectionKey key = (SelectionKey) ite.next();
				if (key.isAcceptable()) {
					SocketChannel clntChan = ((ServerSocketChannel) key.channel()).accept();
					clntChan.configureBlocking(false);
					// 将选择器注册到连接到的客户端信道，
					// 并指定该信道key值的属性为OP_READ，
					// 同时为该信道指定关联的附件
					clntChan.register(key.selector(), SelectionKey.OP_READ, ByteBuffer.allocate(1024));
				}
				if (key.isReadable()) {
					//handleRead(key);
				}
				if (key.isWritable() && key.isValid()) {
					//handleWrite(key);
				}
				if (key.isConnectable()) {
					System.out.	println("isConnectable = true");
				}
				ite.remove();
			}
		}
	}
}
